http://athena.ecs.csus.edu/~changw/159/1/1.html

Sacramento State
Computer Engineering / Computer Science
CpE/CSc 159 Operating System Pragmatics (Spring 2017)
Instructor: W. Chang
Phase 1   Time Sharing and Context Switches
Introduction

In the 1st phase of our OS project the kernel is driven by its internal timer device that we have experimented. The creation, scheduling, and running, of simple thread-based processes are what we will use to test this time-sharing capability.
A mix of pseudo and actual code files are given in Src. What you learned from the timer-event handling is crucial to complete this phase.
Again, copying given files can be done by issuing the shell command: "cp ~changw/html/159/1/Src/* ." (Note the "dot" symbol at the end which means your current directory (as the destination to copy).
Avoid copy-paste from what a webpage shows since it may contain extra characters such as Ctrl-M that can cause compiler errors.
The "Src" Skeleton

The Src directory contains actual and pseudo code that you need: the bootstrap of your OS is to:
first initialize the data the OS will use,
set up control environment (timer-event handling),
create the first process (Init), and
load the first process into CPU (and it runs).
What the Init process does is running an infinite loop showing its PID (1) about every second. While doing so, timer events occur in the background and the kernel code will be invoked and run, and subsequently call its timer handler. The timer event occurs at the rate of 100 Hz.
The timer handler counts the CPU runtime of the running process and compare it against a preset time limit, and then set the kernel to choose a different process to run next when the limit is reached. A pool of processes that are ready to run can have their PID's queue in a queue to be selected. Our kernel can thus alternate the running process with the round-robin timer-sharing scheduling policy.
We also have the kernel coded to catch for a key entry on the Target PC to handle it as:
if n key, create a new process by calling NewProcHandler().
if b key, go into the GDB prompt for debugging work or exit.
TimerHandler() upcounts cpu_time of the Process Control Block (PCB) of the current running process. This count is then compared to TIME_LIMIT. If they are equal, the process will be suspended (a form of preemption). A suspended process will have its PID appended (enqueued) to the tail of ready-to-run process queue for its next turn.
Scheduler() dequeues the next PID from the ready-to-run process queue only when needed. E.g., the current running PID has been reset by TimerHandler. In that case, the first process in the ready-to-run PID queue will be chosen (dequeued) to run.
A process state can be changed by event handlers. The ready_q has PID's of those that are ready to run. The state of these processes are all READY. There is only one process (at most) that has the RUN state, therefore, there is no need to have a queue for it. The PID's of processes not being used are queued in free_q and their state is FREE.
When a new process is to be created, a PID from the free queue is first dequeued by NewProcHandler() which does the rest of the creation work. The PID is to be queued into the ready_q.
The free_q is initially queued with numbers 1 to 19, while the ready_q is initially empty. The first process Init will be created by NewProcHandler and PID 1 since that is the first number to be dequeued from free_q.
Each PID queue has a 20-integer array called q and an integer size to indicate its current size. The code tools.c is to be completed to facilitate enqueue and dequeue functions, besides MyBzero() used to clear data blocks. These are small kernel tools.
Each process has a Process Control Block (PCB) the kernel maintains:
int state, process state: FREE, RUN, READY, SLEEP, WAIT, and ZOMBIE
int cpu_time: counting up by the timer handler routine, set to zero when it is selected to start a new run by Scheduler.
TF_t *TF_p: saved CPU context, located in the process runtime stack.
A process trapframe is constructed by NewProcHandler() as the initial CPU context to load and run a brand new process. The state of the CPU can be saved into a trapframe in the process' own runtime stack. Conversely, to load/resume a process is loading this trapframe back to the CPU (by Loader(), coded in events.S).
The Init process is specially created during the OS bootstrap main(), and the CPU instruction pointer (EIP) in the trapframe is set at the Init() code. All other processes created by pressing 'n' will have their EIP point to UserProc() instead.
A timer event must be dismissed (as how you did it in Timer Event Handling Lab). Otherwise, PIC will not further notify CPU on the next timer event. (Lack of dismissal indicates the CPU is still handling the previous one.)
Deliverables

By now you should have formed your OS team with another partner (at most 2 persons in a team), and mail the instructor: the team name and member names. Team names must not have spaces or special symbols, and are case sensitive. So the instructor can create team directories for you to turn in source files.
Submit only the source files needed to compile from scratch. Do not submit any other files generated by the compiler or SPEDE tools. Source files are those that their names end in .c, .h, and .S only.
Penalty may apply if failing following what stated above.
Review Questions

What is a trapframe? How is it used?
Why asm("sti"); is not used in phase 1? (In the timer event handling lab we did.)
How can the round-robin process scheduling be modified to carry out other types of scheduling policies? (There are so many in the OS studies...)
What are the pros and cons of cooperative OS versus preemptive OS? (Perhaps after phase 2, you can answer this better.)
