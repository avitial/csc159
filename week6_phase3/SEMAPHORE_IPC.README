http://athena.ecs.csus.edu/~changw/159/3/3.html

Sacramento State

Computer Engineering/Computer Science

CpE/CSc 159 Operating System Pragmatics (Spring 2016)

Instructor: W. Chang

Phase 3   Semaphore Interprocess Communication 

In Memoriam of Edsger Wybe Dijkstra (1930-2002)

Goals



In this development phase we extend our OS services with an interprocess communication (IPC) method: semaphores. It provides a way processes can collaborate to avoid "racing/conflicting" conditions when required for their collective goal of operation.

This new service will be tested by several Vehicle processes. Similar to the situation as multiple vehicles are to cross a small bridge that has a capacity sign, there seems to be a virtual semaphore all drivers comply for a safe crossing. With Vehicle processes, each will first issue a semaphore service for getting a pass before its continuation in the code. If a pass is granted, the process can continue (not blocked). If there are no passes left in the semaphore requested at that time, the kernel handler code will suspend  the calling process by placing it into the wait queue of that semaphore (blocking). A process holding a pass will normally later issue another semaphore-related service call to rshecuted constitutes a guarded critical section of process runtime. Any data being accessed during that runtime section is called critical data (guarded by the semaphore).



A semaphore is first allocated by a process with a preset number of passes to initialize it. This numbshacanedhte a semapritializit with a given number 
