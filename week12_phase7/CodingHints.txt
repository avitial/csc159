CodingHints.txt, phase 7 (must work on two terminals)

 1. The "bin-code/"
    sleep3.s (GNU-Assembler/GAS): it calls: Sleep(3) and Exit(xxx).

 2. In "bin-code/" there's a script (build.pl). To use it, issue
    command "build.pl sleep3.s" to compile sleep3.s and get a
    text file "sleep3.txt" which is included into the file-service data:
       ...
       char sleep3[]= {
          #include "bin-code/sleep3.txt" // this must be given as a separate line
       };
       #define SLEEP#_SIZE (sizeof(sleep3))

       dir_t bin_dir[] = {
       { 16, MODE_DIR, ~0, ".", (char *)bin_dir },       // current dir
       { 17, MODE_DIR, ~0, "..", (char *)root_dir },     // parent dir
       { 18, MODE_EXEC, SLEEP3_SIZE, "sleep3", (char *)sleep3 },
       ...

 3. types.h
    Add new constants:
       #define MEM_BASE 0xE00000    // memory pages start at 14M
       #define MEM_PAGE_NUM 100     // kernel maintains 100 memory pages
       #define MEM_PAGE_SIZE 4096   // a memory page has 4096 bytes
    Add "int ppid" into pcb_t.
    Define a new type "mem_page_t" containing "int owner" and "char *addr"
    where "owner" is the owning PID the memory page is allocated for, and
    "addr" is the byte location of a 4KB memory page, starting at MEM_BASE,
    each memory page has MEM_PAGE_SIZE bytes.

 4. main.c/data.h
    Declare "mem_page_t mem_page[MEM_PAGE_NUM];" Our OS will then manage memory.

 5. main()
    Set each memory page such that
       the "owner" is 0 (not being used), and
       point "addr" to the 1st byte of each 4KB memory starting at MEM_BASE.
    "fill_gate()" for the 3 new IDT entries.

 6. events.S/.h
    Add 3 new events:
       ForkEvent  FORK_EVENT  113
       WaitEvent  WAIT_EVENT  114
       ExitEvent  EXIT_EVENT  115

 7. Kernel()
    add new handling cases for 3 new events

 8. services.c/.h
   int Fork(char *p);       // parent creates child, child PID returns
   int Wait(void);          // parent process waits exit_num from exiting child
   void Exit(int exit_num); // process exits, send exit_num to parent

 9. TermProc
    has "int exit_num" (besides its internal "char *cwd")
    which upon new command "echo" will be shown on terminal (similar to command
    "pwd" showing cwd). Set exit_num to 0 when login (as cwd set to "/").
    a new subroutine to be called as a command entered but not mactching any
    other command:
               exit_num = TermBin(char *name, char *cwd, int my_port);

10. the TermBin():
    call FSfind to get attributes and check if "attr_p->mode == MODE_EXEC,"
    if no attribute found or not executable, show error msg to terminal and return,
    otherwise, issue Fork call with the address of the executable code (attr_p->data),
    show on terminal what Fork() returns (child pid),
    issue Wait() call as the return of this function.

11. handlers.c/.h
   void ForkHandler(char *bin_code, int *child_pid) {
      int i;
      A. try to find a free memory page
         for-loop i through all index of mem_page[]
            if owner == 0 --> break loop
         if i is MEM_PAGE_NUM
            cons_printf("Kernel Panic: no memory page available!\n");
            *child_pid = 0  // no PID can be returned
            return
      B. try to allocate a PID
         if free_q has a size 0
            cons_printf("Kernel Panic: no PID available!\n");
            *child_pid = 0  // no PID can be returned
            return
      C. get a PID from free_q
         enqueue it to ready_q
         clear PCB of this PID with MyBzero
         set its state to ...
         set its ppid to ...
      D. clear memory page with MyBzero (starting at the page addr, size MEM_PAGE_SIZE)
         set memory page owner to ...
         copy bin_code into the memory page with MyMemcpy (size MEM_PAGE_SIZE)
      E. set trapframe ptr in PCB to near the end of the memory page (leave TF space)
         set the EIP of trapframe to the start of the memory page
         set rest of the trapframe as before (eflags, cs, ds, etc.)
   }

   void WaitHandler(int *exit_num_p) {
      int child_pid, page_index;
      A. loop thru pcb[] looking for ppid being running PID and state ZOMBIE
         if none found, block the running (parent) process by
            set its state to WAIT
            no process running (set current_pid to 0)
            return
      B. otherwise (found)
         B1. give to the calling parent process the exit number from the found
             ZOMBIE child (in its TF EAX)
      C. reclaim child's resources
         enqueue the found child pid to free_q
         change its state to ...
         reclaim the child's resource:
         loop thru mem_page[] for owner being the child -> set owner to 0

   void ExitHandler(int exit_num) {
      int ppid, *exit_num_p, page_index;
      A. if the state of the parent of the calling process is not WAIT
          (it has not yet call Wait), then change the state of the calling
          (running) process to ZOMBIE
          no process running (set current_pid to 0)
          return
      B. otherwise (parent awaits)
         release the parent by upgrade its state to ...
         enqueue it to ...
         copy exit_number to parent by using the pointer
            exit_num_p = (int *) the EAX of the TF of parent
      C. reclaim child's resources
          loop thru mem_page[] for owner being the child -> set owner to 0
          enqueue child PID to ...
          change state of child PID to ...
          no process running (set current_pid to 0)
   }

